// <auto-generated />
using System;
using AutoHome.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoHome.Data.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20221101035357_AddWeatherReadingTable")]
    partial class AddWeatherReadingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("AutoHome.Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IntegrationDeviceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("AutoHome.Core.Entities.Trigger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Interval")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Triggers");
                });

            modelBuilder.Entity("AutoHome.Core.Entities.TriggerEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TriggerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TriggerId");

                    b.ToTable("TriggerEvents");
                });

            modelBuilder.Entity("AutoHome.Core.Entities.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Key");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("AutoHome.Core.Entities.WeatherReading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AbsoluteBarometricPressure")
                        .HasColumnType("REAL");

                    b.Property<int?>("BatteryLowIndicator")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator10")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator3")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator4")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator5")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator6")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator7")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator8")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatteryLowIndicator9")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CO2PartsPerMillion")
                        .HasColumnType("REAL");

                    b.Property<int>("CO2SensorBatteryLowIndicator")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("DailyRainfall")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit1")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit10")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit2")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit3")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit4")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit5")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit6")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit7")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit8")
                        .HasColumnType("REAL");

                    b.Property<double?>("DewPointFahrenheit9")
                        .HasColumnType("REAL");

                    b.Property<long?>("EpochMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("EventRainfall")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit1")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit10")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit2")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit3")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit4")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit5")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit6")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit7")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit8")
                        .HasColumnType("REAL");

                    b.Property<double?>("FeelsLikeTemperatureFahrenheit9")
                        .HasColumnType("REAL");

                    b.Property<double?>("HourlyRainfall")
                        .HasColumnType("REAL");

                    b.Property<int?>("HumiditySensor1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor10")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor3")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor4")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor5")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor6")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor7")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor8")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HumiditySensor9")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IANATimeZone")
                        .HasColumnType("TEXT");

                    b.Property<double?>("IndoorDewPointTemperatureFahrenheit")
                        .HasColumnType("REAL");

                    b.Property<double?>("IndoorFeelsLikeTemperatureFahrenheit")
                        .HasColumnType("REAL");

                    b.Property<int?>("IndoorHumidity")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("IndoorTemperatureFahrenheit")
                        .HasColumnType("REAL");

                    b.Property<DateTimeOffset?>("LastLightningStrikeTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastRain")
                        .HasColumnType("TEXT");

                    b.Property<double?>("LightningStrikeDistance")
                        .HasColumnType("REAL");

                    b.Property<int?>("LightningStrikesPerDay")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LightningStrikesPerHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Loc")
                        .HasColumnType("TEXT");

                    b.Property<string>("MacAddress")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MaxDailyGust")
                        .HasColumnType("REAL");

                    b.Property<double?>("MonthlyRainfall")
                        .HasColumnType("REAL");

                    b.Property<double?>("OutdoorFeelsLikeTemperatureFahrenheit")
                        .HasColumnType("REAL");

                    b.Property<int?>("OutdoorHumidity")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("OutdoorTemperatureFahrenheit")
                        .HasColumnType("REAL");

                    b.Property<int?>("PM25AirQualityBatteryLowIndicator")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("PM25IndoorAirQuality")
                        .HasColumnType("REAL");

                    b.Property<double?>("PM25IndoorAirQuality24HourAverage")
                        .HasColumnType("REAL");

                    b.Property<double?>("PM25OutdoorAirQuality")
                        .HasColumnType("REAL");

                    b.Property<double?>("PM25OutdoorAirQuality24HourAverage")
                        .HasColumnType("REAL");

                    b.Property<double?>("Previous24HourRainfall")
                        .HasColumnType("REAL");

                    b.Property<double?>("RelativeBarometricPressure")
                        .HasColumnType("REAL");

                    b.Property<int?>("Relay1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay10")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay3")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay4")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay5")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay6")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay7")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay8")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Relay9")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor10")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor3")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor4")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor5")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor6")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor7")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor8")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoilHumiditySensor9")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("SoilTemperatureSensor1")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor10")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor2")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor3")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor4")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor5")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor6")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor7")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor8")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoilTemperatureSensor9")
                        .HasColumnType("REAL");

                    b.Property<double?>("SolarRadiation")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor1")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor10")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor2")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor3")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor4")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor5")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor6")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor7")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor8")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureSensor9")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalRainfall")
                        .HasColumnType("REAL");

                    b.Property<int?>("UltravioletRadiationIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("UtcDate")
                        .HasColumnType("TEXT");

                    b.Property<double?>("WeeklyRainfall")
                        .HasColumnType("REAL");

                    b.Property<int?>("WindDirection")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WindDirection10MinuteAverage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WindDirection2MinuteAverage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WindGustDir")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("WindGustMph")
                        .HasColumnType("REAL");

                    b.Property<double?>("WindSpeedMph")
                        .HasColumnType("REAL");

                    b.Property<double?>("WindSpeedMph10MinuteAverage")
                        .HasColumnType("REAL");

                    b.Property<double?>("WindSpeedMph2MinuteAverage")
                        .HasColumnType("REAL");

                    b.Property<double?>("YearlyRainfall")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("WeatherReadings");
                });

            modelBuilder.Entity("AutoHome.Core.Entities.Trigger", b =>
                {
                    b.HasOne("AutoHome.Core.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("AutoHome.Core.Entities.TriggerEvent", b =>
                {
                    b.HasOne("AutoHome.Core.Entities.Trigger", "Trigger")
                        .WithMany()
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trigger");
                });
#pragma warning restore 612, 618
        }
    }
}
