@inject IStepperMotor StepperMotor
@inject IOptions<CurtainConfig> CurtainConfig

<MudText Typo="Typo.h4" Class="mb-4">Controls</MudText>

<MudStack Spacing="4">
    <MudPaper>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Disabled="@motorRunning()" OnClick="Open">
            @if (opening)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Opening</MudText>
            }
            else
            {
                <MudText>Open</MudText>
            }
        </MudButton>
    </MudPaper>
    <MudPaper>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Disabled="@motorRunning()" OnClick="Close">
            @if (closing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Closing</MudText>
            }
            else
            {
                <MudText>Close</MudText>
            }
        </MudButton>
    </MudPaper>
</MudStack>

@code {
    bool motorRunning() => opening || closing;
    bool opening = false;
    bool closing = false;

    async Task Open()
    {
        opening = true;
        await Rotate(true);
        opening = false;
    }

    async Task Close()
    {
        closing = true;
        await Rotate(false);
        closing = false;
    }

    async Task Rotate(bool clockwise)
    {
        await Task.Run(() =>
        {
            try
            {
                StepperMotor.SetEnabledState(true);
                StepperMotor.RPM = CurtainConfig.Value.RPM;
                StepperMotor.Step(clockwise ? CurtainConfig.Value.Steps : -CurtainConfig.Value.Steps);
            }
            finally
            {
                StepperMotor.SetEnabledState(false);
            }
        });
    }
}