@inject AutoHomeRestClient Client;
@inject IMapper Mapper;
@inject ISnackbar Snackbar

<EditForm Model="@model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudSelect Label="Device" AnchorOrigin="Origin.BottomCenter"
                       @bind-Value="model.DeviceId" For="@(() => model.DeviceId)">
                @foreach (var device in Devices)
                {
                    <MudSelectItem Value="@(device.Id)">@device.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Label="Type" AnchorOrigin="Origin.BottomCenter"
                       @bind-Value="model.Name" For="@(() => model.Name)">
                <MudSelectItem Value="@("CurtainsOpen")" />
                <MudSelectItem Value="@("CurtainsClose")" />
            </MudSelect>
            <MudTextField Label="Interval"
                          @bind-Value="model.Interval" For="@(() => model.Interval)" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public List<ListDevicesResult> Devices { get; set; } = new();

    AddTriggerForm model = new();

    protected override void OnParametersSet()
    {
        if (Devices.Any())
        {
            model.DeviceId = Devices.First().Id;
        }
    }

    async Task Submit(EditContext context)
    {
        var request = new AddTriggerRequest();
        Mapper.Map(model, request);
        var result = await Client.AddTriggerAsync(request, CancellationToken.None);
        if (result is null)
        {
            Snackbar.Add("Error adding the trigger.", Severity.Error);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
