@page "/devices"
@inject AutoHomeRestClient Client;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;
@inject IMapper Mapper;

<MudText Typo="Typo.h4" Class="mt-4 mb-4">Devices</MudText>

<MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(async () => OpenAddDeviceDialog())" />

<MudSimpleTable Style="overflow-x: auto;" Class="mt-4">
    <thead>
        <tr>
            @foreach (var h in _headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (_devices.Any())
        {
            @foreach (var row in _devices)
            {
                <tr>
                    <td>@row.DeviceId</td>
                    <td>@row.Name</td>
                    <td>@row.Uri</td>
                    <td>
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(async () => UpdateDevice(row))" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(async () => DeleteDevice(row))" />
                    </td>
                </tr>
            }
        }
        else
        {
            <tr colspan=4>
                <td>No devices</td>
            </tr>
        }

    </tbody>
</MudSimpleTable>

@code {
    IEnumerable<ListDevicesResult> _devices { get; set; } = new List<ListDevicesResult>();
    string[] _headings = { "Device ID", "Name", "Url", "Actions" };

    protected override async Task OnInitializedAsync()
    {
        await RefreshDevices();
    }

    private async Task RefreshDevices()
    {
        var devices = await Client.ListDeviceAsync(CancellationToken.None);
        if (devices?.Any() ?? false) _devices = devices;
        StateHasChanged();
    }

    private async void OpenAddDeviceDialog()
    {
        DialogOptions dialogOptions = new DialogOptions()
        {
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
        };

        var dialog = DialogService.Show<AddDeviceDialog>("Add Device", dialogOptions);
        var result = (bool?)(await dialog.Result).Data;

        if (result ?? false)
        {
            await RefreshDevices();
        }
    }

    private async void UpdateDevice(ListDevicesResult device)
    {
        var dialogOptions = new DialogOptions()
        {
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
        };
        AddEditDeviceForm model = new();
        Mapper.Map(device, model);
        var parameters = new DialogParameters { ["Model"] = model };

        var dialog = DialogService.Show<EditDeviceDialog>($"Update {device.Name}", parameters, dialogOptions);
        var result = (bool?)(await dialog.Result).Data;

        if (result ?? false)
        {
            await RefreshDevices();
        }
    }

    private async void DeleteDevice(ListDevicesResult device)
    {
        try
        {
            bool? result = await DialogService.ShowMessageBox($"Delete {device.Name}", $"Are you sure you want to delete {device.Name}?", noText: "No");
            if (result == true)
            {
                try
                {
                    await Client.DeleteDeviceAsync(device.Id.ToString(), CancellationToken.None);
                    await RefreshDevices();
                    Snackbar.Add($"{device.Name} deleted", Severity.Success);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error deleting {device.Name}.\n\n{ex.Message}", Severity.Error);
                }
            }
        }
        finally
        {

        }
    }
}
