@page "/triggerhistory"

@inject NavigationManager NavigationManager
@inject AutoHomeRestClient Client;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;
@inject IMapper Mapper;

<PageHeaderMenu Title="Trigger History">
    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Class="mt-2 mb-2" Disabled="@_loading"
        OnClick="@(async () => RefreshAsync())">
    </MudIconButton>
</PageHeaderMenu>

<MudSimpleTable Style="overflow-x: auto;">
    <thead>
        <tr>
            @foreach (var h in _headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (_triggerEvents.Any())
        {
            @foreach (var row in _triggerEvents)
            {
                <tr>
                    <td>@row.TimeStamp.LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@row.Trigger.Name</td>
                    <td>@row.Event</td>
                </tr>
            }
        }
        else
        {
            <tr colspan=4>
                <td>No trigger events</td>
            </tr>
        }

    </tbody>
</MudSimpleTable>

<div class="d-flex flex-column align-center">
    <MudPagination ShowFirstButton="true" ShowLastButton="true" Class="mt-4 mb-4" SelectedChanged="SelectedPageChangedAsync" Selected="_listQuery.PageIndex" Count="_pageCount" />
</div>

@code {
    private ListQuery _listQuery { get; set; }
    IEnumerable<ListTriggerEventsResult> _triggerEvents { get; set; } = new List<ListTriggerEventsResult>();
    string[] _headings = { "Time Stamp", "Trigger Name", "Event" };
    bool _loading = true;
    int _pageCount = 0;

    protected override async Task OnInitializedAsync()
    {
        _listQuery = NavigationManager.GetListQuery();
        NavigationManager.LocationChanged += HandleLocationChanged;
        await RefreshAsync();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        _listQuery = NavigationManager.GetListQuery();
        StateHasChanged();
    }

    private async Task RefreshAsync()
    {
        _loading = true;
        var triggerEvents = await Client.ListTriggerEventsAsync(_listQuery.PageIndex, _listQuery.PageSize);
        _triggerEvents = triggerEvents.Data;
        _pageCount = triggerEvents.TotalPages;
        _loading = false;
        StateHasChanged();
    }

    private async Task SelectedPageChangedAsync(int pageIndex)
    {
        var dict = new ReadOnlyDictionary<string, object?>(new Dictionary<string, object?>()
            {
                { "pageIndex", pageIndex },
                { "pageSize", _listQuery.PageSize },
            });
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(dict));
        _listQuery.PageIndex = pageIndex;
        _listQuery.PageSize = Convert.ToInt32(dict["pageSize"]);

        await RefreshAsync();
        StateHasChanged();
    }
}