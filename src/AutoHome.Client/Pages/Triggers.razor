@page "/triggers"
@inject AutoHomeRestClient Client;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;
@inject IMapper Mapper;

<MudText Typo="Typo.h4" Class="mt-4 mb-4">Triggers</MudText>

<MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Disabled="@_buttonsDisabled" OnClick="@(async () => OpenAddTriggerDialog())" />

<MudSimpleTable Style="overflow-x: auto;" Class="mt-4">
    <thead>
        <tr>
            @foreach (var h in _headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (_triggers.Any())
        {
            @foreach (var row in _triggers)
            {
                <tr>
                    <td>@row.Device.Name @row.Device.Type</td>
                    <td>@row.Name</td>
                    <td>@row.Interval</td>
                    <td>
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Disabled="@_buttonsDisabled" OnClick="@(async () => UpdateTrigger(row))" />
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" Disabled="@_buttonsDisabled" OnClick="@(async () => DeleteTrigger(row))" />
                    </td>
                </tr>
            }
        }
        else
        {
            <tr colspan=4>
                <td>No triggers</td>
            </tr>
        }

    </tbody>
</MudSimpleTable>

@code {
    IEnumerable<ListTriggersResult> _triggers { get; set; } = new List<ListTriggersResult>();
    ICollection<ListDevicesResult> _devices = new List<ListDevicesResult>();
    string[] _headings = { "Device", "Name", "Interval", string.Empty };
    bool _buttonsDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        _devices = await Client.ListDeviceAsync(CancellationToken.None);
        await Refresh();
    }

    private async Task Refresh()
    {
        var triggers = await Client.ListTriggerAsync(CancellationToken.None);
        if (triggers?.Any() ?? false)
        {
            _triggers = triggers;
        }
        StateHasChanged();
    }

    private async void OpenAddTriggerDialog()
    {
        DialogOptions dialogOptions = new()
            {
                CloseOnEscapeKey = true,
                DisableBackdropClick = true,
            };
        var parameters = new DialogParameters { ["Devices"] = _devices };

        try
        {
            _buttonsDisabled = true;
            var dialog = DialogService.Show<AddTriggerDialog>("Add Trigger", parameters, dialogOptions);
            var result = (bool?)(await dialog.Result).Data;

            if (result ?? false)
            {
                await Refresh();
            }
        }
        finally
        {
            _buttonsDisabled = false;
            StateHasChanged();
        }
    }

    private async void UpdateTrigger(ListTriggersResult trigger)
    {
        var dialogOptions = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                DisableBackdropClick = true,
            };
        EditTriggerForm model = new();
        Mapper.Map(trigger, model);
        var parameters = new DialogParameters { ["Model"] = model, ["Devices"] = _devices };

        try
        {
            _buttonsDisabled = true;
            var dialog = DialogService.Show<EditTriggerDialog>($"Update {trigger.Name}", parameters, dialogOptions);
            var result = (bool?)(await dialog.Result).Data;

            if (result ?? false)
            {
                await Refresh();
            }
        }
        finally
        {
            _buttonsDisabled = false;
            StateHasChanged();
        }
    }

    private async void DeleteTrigger(ListTriggersResult trigger)
    {
        try
        {
            _buttonsDisabled = true;
            bool? result = await DialogService.ShowMessageBox($"Delete {trigger.Name}", $"Are you sure you want to delete {trigger.Name}?", noText: "No");
            if (result == true)
            {
                try
                {
                    await Client.DeleteTriggerAsync(trigger.Id.ToString(), CancellationToken.None);
                    await Refresh();
                    Snackbar.Add($"{trigger.Name} deleted", Severity.Success);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error deleting {trigger.Name}.\n\n{ex.Message}", Severity.Error);
                }
            }
        }
        finally
        {
            _buttonsDisabled = false;
            StateHasChanged();
        }
    }
}
